'(
  (** equal 2 3)
  (:= (true  t e) t)
  (:= (false t e) e)
  (:= (if bool then else) (bool then else))
  (:= (eq? a b) (** equal a b))
  (:= (cons- head tail f) (f head tail))
  (:= (car- head tail) head)
  (:= (cdr- head tail) tail)
  (:= (infinite5) (cons- 5 infinite5))
  (:= (map h t f)
      (if (eq? t nil)
      (f h)
      (cons- (f h) (map (t car-) (t cdr-) f))))
  ;((cons- 1 (cons- 2 (cons- 3 'nil))) map (-> (it) "ee"))
  ((cons- 1 (cons- 2 (cons- 3 'nil))) cdr- cdr- car-)
  (infinite5 (-> (x y) x))
)